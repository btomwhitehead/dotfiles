set nocompatible              " be iMproved, required
set backspace=indent,eol,start

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'lepture/vim-jinja'
Plugin 'nvie/vim-flake8'
Plugin 'godlygeek/tabular'
Plugin 'ekalinin/dockerfile.vim'
Plugin 'hashivim/vim-terraform'
Plugin 'altercation/vim-colors-solarized'
Plugin 'fatih/vim-go'

call vundle#end()            " required
filetype plugin indent on    " required

" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

syntax enable

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

" Required by altercation/vim-colors-solarized
colorscheme solarized

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
"set ignorecase  	" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden     	" Hide buffers when they are abandoned
set mouse=a   		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

"Turn on line numbering. Turn it off with "set nonu" 
"set nonu 
set number

" Indent automatically depending on filetype
filetype indent on
set autoindent

" Case insensitive search
set ic

" Higlhight search
set hls

" Wrap text instead of being on one line
set lbr

" Prevent right hand scrollbar in macvim.
set guioptions-=r
set guioptions-=T

" Fold code according to syntax (automatically)
set foldmethod=syntax

set wrapmargin=0
set expandtab
set tabstop=4
set shiftwidth=4
set textwidth=0
set smarttab

" Highlight chars that go over the 80-column limit
" :highlight OverLength ctermbg=red ctermfg=white guibg=red guifg=white
" :match OverLength '\%81v.*'

set formatoptions=rqo      " word wrap, format comments
set formatoptions+=1

set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'

let g:Tex_FormatDependency_pdf = 'dvi,ps,pdf'
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_MultipleCompileFormats = 'pdf' 

"Latex - compile, convert to PDF, and open in Preview
"map ,c :w<cr>:!make <cr>
"Linear algebra: insert a matrix.
map ,m a \begin{bmatrix} \end{bmatrix}<esc>bbbbi
"F5 inserts datestamp"
:nnoremap <F5> "=strftime("%c")<CR>P
:inoremap <F5> <C-R>=strftime("%c")<CR>

" personal syntax highlighting 
let pinpointfile = "/home/tom/mysyntax/pinpoint.vim"
au BufNewFile,BufRead *.pin set filetype=pinpoint
au! Syntax pinpoint source /home/tom/.vim/pinpoint.vim

let mapleader = ","
" turn off highlighted search
map <silent> <leader>/ :silent noh<CR> 

setlocal spelllang=en_gb

"set modeline
"set ls=2

 set directory=~/.vim/swaps
" set backupdir=~/.vim/backups

set nocompatible                                           
" call pathogen#infect()                                     
" execute pathogen#infect()
filetype plugin on
set ruler

autocmd! BufNewFile,BufRead *.pde setlocal ft=arduino

let g:syntastic_python_python_exec = 'python3'

set cursorline
set tw=80

if $COLORTERM == 'gnome-terminal'
  set t_Co=256
endif

set laststatus=2
set statusline=%F       "tail of the filename
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file
